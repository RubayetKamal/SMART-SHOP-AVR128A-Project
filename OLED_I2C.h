/*
 * OLED_I2C.h
 *
 * Created: 08/12/2023 16:17:37
 *  Author: $RHEK00-BS9TAG427UBC
 */ 


#ifndef OLED_I2C_H_
#define OLED_I2C_H_

/*
 * OLED_Project.c
 *
 * Created: 19/11/2023 21:53:50
 * Author : ste
 */ 
#include <avr/io.h>
#include <stdlib.h>
#include <stdio.h>
#include "dht.h"
#define F_CPU 1000000UL
#include "util/delay.h"
#include <avr/interrupt.h>
#include "i2c_master.h"
#include <string.h>
// OLED Library
#include "u8x8.h"
#include "u8g2.h"
#include "u8x8_atmega88_hal.h"

/* ********************************************************************************
OLED Pins
******************************************************************************** */
#define  DDR_OLED_RES		DDRE
#define  PORT_OLED_RES		PORTE
#define  BIT_OLED_RES		PE4
#define  OLED_RES_out()		DDR_OLED_RES |= (1<<BIT_OLED_RES)
#define  OLED_RES_high()	PORT_OLED_RES |= (1<<BIT_OLED_RES)
#define  OLED_RES_low()		PORT_OLED_RES &= ~(1<<BIT_OLED_RES)

/* ********************************************************************************/
extern u8g2_t u8g2_ssd1306_s;

#define logo_rus_width 128
#define logo_rus_height 64
void storeData();
void DisplaytData();
void displayOpened();
 char data[5];
static const uint8_t logo_rus_bits[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x27, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x73, 0x00, 0xff, 0x07, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x71, 0x00,
	0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x18, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x83,
	0x03, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x07, 0x0c, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xf8, 0x70, 0xfc, 0x03, 0x00, 0x00,
	0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x1c,
	0x0c, 0x43, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xe0, 0x00, 0x00, 0x06, 0x06, 0xc0, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x9c, 0x7d, 0x00, 0x01,
	0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
	0xf0, 0xe1, 0x8b, 0x01, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x00, 0x03, 0x00, 0x00, 0x30, 0xf0, 0x00, 0x2c, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x23, 0x00, 0x00, 0x00, 0xc0, 0x07,
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0xe3, 0x01,
	0x00, 0x00, 0x20, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x63, 0x4e, 0x00, 0x00, 0x20, 0x00, 0x3c, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x3b, 0xe6, 0x04, 0x00, 0x00, 0x00,
	0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x0f, 0xef,
	0x7c, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
	0x00, 0x00, 0x07, 0x7f, 0xee, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x71, 0x86, 0xf9, 0x00, 0x00,
	0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x80, 0x39,
	0x87, 0xf1, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x00, 0x00, 0x00, 0xb8, 0xc3, 0x31, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x80, 0xff, 0x38, 0x00, 0x00,
	0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x18, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x00,
	0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0x03, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x30, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xf8, 0x0f, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf8,
	0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0d, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0xc3, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0xfe, 0x3f, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
	0xe1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xc0, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x3c, 0x80,
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xf8, 0xff, 0x00,
	0x00, 0x00, 0x7e, 0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0x87, 0xff, 0x07, 0x00, 0x00, 0x7e, 0xc0, 0x06, 0x00, 0x00, 0x00,
	0x00, 0xfe, 0xff, 0xff, 0x8f, 0x3f, 0xfc, 0x7f, 0x00, 0x00, 0x7c, 0xc0,
	0xfe, 0xff, 0x03, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0xf8, 0xe1, 0xff,
	0x03, 0x00, 0x38, 0xc0, 0xfa, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xc0, 0x0f, 0xfe, 0x1f, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x00,
	0x00, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0xf0, 0xff, 0x01, 0x00, 0x40,
	0xfa, 0xff, 0x03, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x07,
	0xff, 0x0f, 0x00, 0x60, 0xfa, 0xff, 0x03, 0x00, 0x00, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0x0f, 0x3f, 0xf8, 0x7f, 0x00, 0x60, 0xfb, 0xff, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0xf8, 0xc1, 0xff, 0x07, 0x60,
	0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xc7,
	0x1f, 0xfc, 0x3f, 0x78, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0x3f, 0xfe, 0xe0, 0xff, 0x7f, 0x1f, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xe1, 0x07, 0xff, 0x3f,
	0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
	0x1f, 0x3f, 0xf0, 0x1f, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x80, 0xff, 0xf8, 0x81, 0x07, 0x1d, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xc7, 0x1f, 0xf8,
	0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xc0, 0x3f, 0xfc, 0xb0, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xe3, 0xa7, 0x0d, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0xff,
	0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0xff, 0xf8, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0x0e, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f,
	0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0x00, 0x00, 0x00 };

void initOLED(){
		OLED_RES_out();
		OLED_RES_high();
		_delay_ms(1000);
		OLED_RES_low();
		_delay_ms(1000);
		OLED_RES_high();
		_delay_ms(100);
		
		// Print String on the display
		u8x8_init_atmega88();
		u8x8_DrawString_at(1,1,"Humidity:");
		u8x8_DrawString_at(1,3,"Temperature:");
		
		_delay_ms(5000);
}
void storeData(){
			humidityHigh=Receive_data();	               /* store first eight bit in I_RH */
			humidityLow=Receive_data();	               /* store next eight bit in D_RH */
			temperatureHigh=Receive_data();                 /* store next eight bit in I_Temp */
			temperatureLow=Receive_data();	               /* store next eight bit in D_Temp */
			CheckSum=Receive_data();               /* store next eight bit in CheckSum */
}

void DisplaytData(){
	if ((humidityHigh + humidityLow + temperatureHigh + temperatureLow) != CheckSum)
	{
		u8x8_init_atmega88();
		u8x8_DrawString_at(1,2,"Error");
		u8x8_DrawString_at(1,6,"Error");
	}
	
	else
	{
		//u8x8_init_atmega88();
		itoa(humidityHigh,data,10);
		u8x8_DrawString_at(1,2,data);
		u8x8_DrawString_at(3,2,".");
		itoa(humidityLow,data,10);
		u8x8_DrawString_at(4,2,data);
		u8x8_DrawString_at(5,2,"%");
		
		itoa(temperatureHigh,data,10);
		u8x8_DrawString_at(1,4,data);
		u8x8_DrawString_at(3,4,".");
		itoa(temperatureLow,data,10);
		u8x8_DrawString_at(4,4,data);
		u8x8_DrawString_at(5,4,"°C");
	}
	
	_delay_ms(2000);
}


void displayWarning(){
	u8x8_DrawString_at(1, 7, "Warning!");
}

void displayOpened(){
	u8x8_DrawString_at(1, 7, "Opened!");
}

void displayClosed(){
	u8x8_DrawString_at(1, 7, "Closed!");
}
#endif /* OLED_I2C_H_ */